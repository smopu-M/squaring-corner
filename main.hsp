/*
SQUARING CORNERのソースコードです。

標準のHSPのエディタではコンパイルすることはできません。
このソースをコンパイルするには、エディタがUnicodeに対応している必要があります。
VSCodeやUnicode対応のエディタによる環境構築が必要です。

また、営利、非営利を問わず無料でご利用いただけますが無保証です。
改変物を再配布する場合は、オリジナル作者が「ゆっくりXP」であることを区別できる形でお願いします。
*/

#include "hsp3utf.as"

#uselib "kernel32.dll"
#cfunc GetUserDefaultUILanguage "GetUserDefaultUILanguage"
#func GetModuleFileName "GetModuleFileNameW" int , var , int
#cfunc LoadLibrary "LoadLibraryW" wstr
#cfunc GetProcAddress "GetProcAddress" int,int
#func FreeLibrary "FreeLibrary" int
#uselib "SHELL32.DLL"
#func ExtractIconEx	"ExtractIconExW" var,int,int,var,int
#func Shell_NotifyIcon "Shell_NotifyIconW" int,var

#uselib "gdi32.dll"
#func GetDeviceCaps "GetDeviceCaps" int,int

#uselib "NTDLL.dll"
#func RtlGetVersion "RtlGetVersion" int

#uselib "uxtheme.dll"
#func SetWindowTheme "SetWindowTheme" int, wptr,nullptr

#include "user32.as"
#func SetProcessDPIAware "SetProcessDPIAware"

#define TITL "SQUARING CORNER"
#define VER "4.3"
#packopt name "squaring_corner"
#packopt runtime "runtime.hrt"
#packopt hide 1

#define global WM_CTLCOLORSTATIC 0x0138
#define global ctype RGB(%1,%2,%3) (%1 | %2 << 8 | %3 << 16)

#uselib "DWMAPI.DLL"
#func global DwmGetWindowAttribute "DwmGetWindowAttribute" int, int, int, int
#func global DwmSetWindowAttribute "DwmSetWindowAttribute" int, int, int, int

#define global DWMWA_USE_IMMERSIVE_DARK_MODE 20
#define global DWMWA_WINDOW_CORNER_PREFERENCE 33

#enum global DWMWCP_DEFAULT = 0
#enum global DWMWCP_DONOTROUND
#enum global DWMWCP_ROUND
#enum global DWMWCP_ROUNDSMALL

#include "modules.hsp"

//if varptr(SetWindowTheme) = 0:MessageBoxExW 0,"Failed to call uxtheme.dll",TITL,16 | 0x00010000 | 0x00040000,0x0409:end
if varptr(DwmSetWindowAttribute) = 0:MessageBoxExW 0,"Failed to call dwmapi.dll",TITL,16 | 0x00010000 | 0x00040000,0x0409:end

if varptr(SetProcessDPIAware){
	XDPI=GetDeviceCaps(GetDC(0),LOGPIXELSX)
	YDPI=GetDeviceCaps(GetDC(0),LOGPIXELSY)
}else{
	XDPI = 96
	YDPI = 96
}

exist "config.ini"
if strsize > 0{
langcode = getini(dir_cur+"\\config.ini","lang",GetUserDefaultUILanguage(),0)
}else{
//Windowsの表示言語の状態を取得
if langcode = 0:langcode = GetUserDefaultUILanguage()
}
langcode2 = langcode
//シンガポール中国語の場合は中国語（中国）に変更
if langcode = 0x1004:langcode = 0x0804

//香港中国語の場合は台湾中国語
if langcode = 0x0C04:langcode = 0x0404

//コマンドラインの取得
cmdline = getpath(dir_cmdline,16)
nonclick = 0

strrep cmdline,"　"," "
split cmdline," ",引数
cmdline = ""

foreach 引数
if 引数(cnt) = "/about" | 引数(cnt) = "-about":gosub *about:end
if 引数(cnt) = "/nomsg" | 引数(cnt) = "-nomsg":nomsg = 1
if 引数(cnt) = "/point" | 引数(cnt) = "-point":ptflag = 1:nonclick = 1:goto *pointmain
if 引数(cnt) = "/click" | 引数(cnt) = "-click":goto *pointmain
loop
if nomsg :goto *pointmain

#addition "hotkey_corners.hsp"
#include "point_corner.hsp"
stop

//言語のフォント
*langfont
switch langcode
case 0x0411
font "Meiryo",YSIZ(16)
	swbreak
case 0x0412
	font "Malgun Gothic",YSIZ(16)
	swbreak
case 0x0804
	font "Microsoft YaHei UI",YSIZ(16)
	swbreak
case 0x0404
	font "Microsoft JhengHei UI",YSIZ(16)
	swbreak
default
	font "Segoe UI",YSIZ(16)
swbreak
swend

mref BMSCR, 67
hFont = BMSCR.38
return

//四角ウィンドウ
*sendsquarecorner
			opt = 0
			DwmGetWindowAttribute window,DWMWA_WINDOW_CORNER_PREFERENCE,varptr(opt),4//角丸ウィンドウの状態を取得する
			if opt=DWMWCP_DONOTROUND {
				opt=DWMWCP_DEFAULT
				if nomsg = 0:gosub *defmsg
			} else {
				opt=DWMWCP_DONOTROUND
				
				if nomsg = 0{
				switch langcode
				case 0x0411
					langmsg(0) = "ウィンドウを四角に変更しました。"
					swbreak
				case 0x0412
					langmsg(0) = "창을 사각 변경했습니다."
					swbreak
				case 0x0804
					langmsg(0) = "将窗口更改为方形。"
					swbreak
				case 0x0404
					langmsg(0) = "將視窗更改為方形。"
					swbreak
				default
					langmsg(0) = "Changed the window to Square."
					swbreak
				swend
				}
				
			}
			
			//角丸ウィンドウの処理
			DwmSetWindowAttribute window,DWMWA_WINDOW_CORNER_PREFERENCE,varptr(opt),4
			if stat = 0{
				if nomsg = 0{
					if langcode = 0x0411|langcode = 0x0412|langcode = 0x0804|langcode = 0x0404{
						MessageBoxExW hwnd,langmsg(0),TITL,64 | 0x00040000 | 0x00010000,langcode2
					}else{
						MessageBoxExW hwnd,langmsg(0),TITL,64 | 0x00040000 | 0x00010000,0x0409
					}
					langmsg(0) = ""
					
					//ウィンドウを閉じていない場合や表示されている場合はアクティブにする
					if IsWindow(window) & ptflag = 0{
						if IsWindowVisible(window){
							SetForegroundWindow window
						}
					}
				}
			}else{
				gosub *sippai
			}

return

//小さい角丸ウィンドウ
*sendsmallcorner
			opt = 0
			DwmGetWindowAttribute window,DWMWA_WINDOW_CORNER_PREFERENCE,varptr(opt),4
			if opt=DWMWCP_ROUNDSMALL {
				
				opt=DWMWCP_DEFAULT
				
				if nomsg = 0:gosub *defmsg
				
			} else {
				
				opt=DWMWCP_ROUNDSMALL
				
				if nomsg = 0{
				switch langcode
				case 0x0411
					langmsg(0) = "ウィンドウを小さい丸角に変更しました。"
					swbreak
				case 0x0412
					langmsg(0) = "창을 작은 둥근 모서리로 변경했습니다."
					swbreak
				case 0x0804
					langmsg(0) = "将窗口更改为小圆角。"
					swbreak
				case 0x0404
					langmsg(0) = "將視窗變更為小圓角。"
					swbreak
				default
					langmsg(0) = "Changed the window to Small rounded corners."
					swbreak
				swend
				}
			}
			DwmSetWindowAttribute window,DWMWA_WINDOW_CORNER_PREFERENCE,varptr(opt),4
		
			if stat = 0{
				if nomsg = 0{
					
					if langcode = 0x0411|langcode = 0x0412|langcode = 0x0804|langcode = 0x0404{
						MessageBoxExW hwnd,langmsg(0),TITL,64 | 0x00040000 | 0x00010000,langcode2
					}else{
						MessageBoxExW hwnd,langmsg(0),TITL,64 | 0x00040000 | 0x00010000,0x0409
					}
					langmsg(0) = ""
					
					//ウィンドウを閉じていない場合や表示されている場合はアクティブにする
					if IsWindow(window) & ptflag = 0{
						if IsWindowVisible(window){
							SetForegroundWindow window
						}
					}
				}
			}else{
				gosub *sippai
			}
return

//通常の角丸ウィンドウ
*sendroundcorner
			opt = 0
			DwmGetWindowAttribute window,DWMWA_WINDOW_CORNER_PREFERENCE,varptr(opt),4
			if opt=DWMWCP_ROUND {
				
				opt=DWMWCP_DEFAULT
				
				if nomsg = 0:gosub *defmsg
			
				
			} else {
				
				opt=DWMWCP_ROUND
				
				if nomsg = 0{
				switch langcode
				case 0x0411
					langmsg(0) = "ウィンドウを通常の角丸に変更しました。"
					swbreak
				case 0x0412
					langmsg(0) = "창을 일반 모서리로 변경했습니다."
					swbreak
				case 0x0804
					langmsg(0) = "将窗口更改为普通圆角。"
					swbreak
				case 0x0404
					langmsg(0) = "將視窗變更為普通圓角。"
					swbreak
				default
					langmsg(0) = "Changed the window to Normal rounded corners."
					swbreak
				swend
				}
			}
			//角丸ウィンドウの処理
			DwmSetWindowAttribute window,DWMWA_WINDOW_CORNER_PREFERENCE,varptr(opt),4
			if stat = 0{
				if nomsg = 0{
					
					if langcode = 0x0411|langcode = 0x0412|langcode = 0x0804|langcode = 0x0404{
						MessageBoxExW hwnd,langmsg(0),TITL,64 | 0x00040000 | 0x00010000,langcode2
					}else{
						MessageBoxExW hwnd,langmsg(0),TITL,64 | 0x00040000 | 0x00010000,0x0409
					}
					langmsg(0) = ""
					
					//ウィンドウを閉じていない場合や表示されている場合はアクティブにする
					if IsWindow(window) & ptflag =0{
						if IsWindowVisible(window){
							SetForegroundWindow window
						}
					}
				}
			}else{
				gosub *sippai
			}
return
*checkos

switch langcode
case 0x0411
	MessageBoxExW 0,"本ソフトはWindows 11以降用です。\nお使いのOSでは、角丸ウィンドウがサポートされていないため使用できません。",TITL+" - 終了します",16 |  0x00010000 | 0x00040000,langcode2
swbreak
case 0x0412
	MessageBoxExW 0,"이 앱은 Windows 11 이후용입니다.\n이 OS는 모서리 동그라미 창이를 지원되지 않아 실행할 수 없습니다.",TITL + "- 종료합니다",16 |  0x00010000 | 0x00040000,langcode2
swbreak
case 0x0804
	MessageBoxExW 0,"此应用程序适用于 Windows 11 及更高版本。 \n您的操作系统不支持窗口圆角。",TITL + "- 退出",16 |  0x00010000 | 0x00040000,langcode2
swbreak
case 0x0404
	MessageBoxExW 0,"此應用程式適用於 Windows 11 及更高版本。 \n您的作業系統不支援視窗圓角。",TITL + "- 退出",16 |  0x00010000 | 0x00040000,langcode2
swbreak
default
	MessageBoxExW 0,"This app is for Windows 11 and above.\nThis cannot be used because your OS does not support rounded corners.",TITL + " - Exit",16 |  0x00010000 | 0x00040000,0x0409
swbreak
swend

end
stop

*defmsg
				switch langcode
				case 0x0411
					langmsg(0) = "ウィンドウの角丸をデフォルトに戻しました。"
					swbreak
				case 0x0412
					langmsg(0) = "둥근 모서리 창을 기본값으로 변경했습니다."
					swbreak
				case 0x0804
					langmsg(0) = "将圆角窗口改回默认值。"
					swbreak
				case 0x0404
					langmsg(0) = "將圓角視窗變更回預設值。"
					swbreak
				default
					langmsg(0) = "Changed the Rounded corners Window back to default."
					swbreak
				swend
return

*cmd_about
oncmd 0
gosub *about
oncmd 1
return

*win_sippai
switch langcode
case 0x0411
	MessageBoxExW 0,"ウィンドウの取得に失敗しました。",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
case 0x0412
	MessageBoxExW 0,"창을 얻지 못했습니다.",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
case 0x0804
	MessageBoxExW 0,"无法获取窗口。",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
case 0x0404
	MessageBoxExW 0,"無法獲取視窗。",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
default
	MessageBoxExW 0,"Failed to get window.",TITL,16 | 0x00040000 | 0x00010000,0x0409
swbreak
swend
return

*sippai
switch langcode
case 0x0411
	MessageBoxExW 0,"角丸ウィンドウの処理に失敗しました。",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
case 0x0412
	MessageBoxExW 0,"둥근 모서리 창 처리에 실패했습니다.",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
case 0x0804
	MessageBoxExW 0,"无法处理窗口的圆角。",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
case 0x0404
	MessageBoxExW 0,"無法處理窗口的圓角。",TITL,16 | 0x00040000 | 0x00010000,langcode2
swbreak
default
	MessageBoxExW 0,"Failed to process rounded corner the window.",TITL,16 | 0x00040000 | 0x00010000,0x0409
swbreak
swend
return
